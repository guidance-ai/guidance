from typing import Annotated, Optional

from annotated_types import Ge, Le
from pydantic import BaseModel, Field, NonNegativeInt, computed_field


class TokenUsage(BaseModel):
    input_tokens: NonNegativeInt = 0
    """Number of tokens used as input to the model, inclusive of cached_input_tokens."""

    cached_input_tokens: NonNegativeInt = 0
    """Number of input tokens that were already in the KV cache."""

    forward_passes: NonNegativeInt = 0
    """Number of forward passes made to the model."""

    cached_output_tokens: NonNegativeInt = 0
    """Number of forward passes we avoided by hitting the KV cache."""

    ff_tokens: Optional[NonNegativeInt] = None
    """Number of output tokens that were fast-forwarded by the parser (if applicable)."""

    round_trips: NonNegativeInt = 0
    """Number of times a completion was generated. For remote models, this is the number of
    API calls made to the model. For local models, this is the number of times we entered a
    completion loop to generate output tokens."""

    total_latency_ms: Annotated[float, Ge(0)] = 0.0
    """Total latency of the model in milliseconds. This includes the time spent on all forward passes and
    the time spent on fast-forwarding tokens (if applicable)."""

    ttft_ms: Annotated[float, Ge(0)] = 0.0
    """Time to first token in ms"""

    mask_times_ms: list[Annotated[float, Ge(0)]] = Field(default_factory=list)
    """List of mask times in ms for each token generated."""

    mask_overheads_ms: list[Annotated[float, Ge(0)]] = Field(default_factory=list)
    """List of mask overhead times in ms for each token generated."""

    ttfm_ms: Annotated[float, Ge(0)] = 0.0
    """Time to first mask in ms"""

    @computed_field  # type: ignore[misc]
    @property
    def output_tokens(self) -> NonNegativeInt:
        """Total number of output tokens generated by the model, inclusive of cached_output_tokens and ff_tokens.

        Note that this may overcount the actual number of tokens generated if some tokens were backtracked or some
        forward passes were used just to pre-fill or compute probabilities for visualization"""
        return self.forward_passes + self.cached_output_tokens + (self.ff_tokens or 0)

    @computed_field  # type: ignore[misc]
    @property
    def token_savings(self) -> Optional[Annotated[float, Ge(0), Le(1)]]:
        """The fraction of output tokens that were fast-forwarded by the parser (if applicable)."""
        if self.ff_tokens is None:
            return None
        if self.output_tokens == 0:
            return 0.0
        return self.ff_tokens / self.output_tokens

    @computed_field  # type: ignore[misc]
    @property
    def avg_latency_ms(self) -> float:
        """Average latency of tokens generated by the model."""
        if self.output_tokens == 0:
            return 0.0
        return self.total_latency_ms / self.output_tokens

    def __add__(self, other: "TokenUsage") -> "TokenUsage":
        if self.ff_tokens is None and other.ff_tokens is None:
            ff_tokens = None
        else:
            ff_tokens = (self.ff_tokens or 0) + (other.ff_tokens or 0)

        ttft_ms = other.ttft_ms
        ttfm_ms = other.ttfm_ms

        return TokenUsage(
            ff_tokens=ff_tokens,
            ttft_ms=ttft_ms,
            ttfm_ms=ttfm_ms,
            **{
                field: getattr(self, field) + getattr(other, field)
                for field in set(self.__class__.model_fields) - {"ff_tokens", "ttft_ms", "ttfm_ms"}
            },
        )
