name: Build wheels

on:
  release:
    types: [published]

  # Enable manual run
  workflow_dispatch:

jobs:
  generate-wheels-matrix:
    # Create a matrix of all architectures & versions to build.
    # This enables the next step to run cibuildwheel in parallel.
    # From https://iscinumpy.dev/post/cibuildwheel-2-10-0/#only-210
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4
      - name: Install cibuildwheel
      # Nb. keep cibuildwheel version pin consistent with job below
        run: pipx install cibuildwheel==2.17.0
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux --archs x86_64 \
              | jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos --archs x86_64 \
              | jq -nRc '{"only": inputs, "os": "macos-12"}' \
              && cibuildwheel --print-build-identifiers --platform macos --archs arm64 \
              | jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && cibuildwheel --print-build-identifiers --platform windows --archs auto64 \
              | jq -nRc '{"only": inputs, "os": "windows-latest"}'
            } | jq -sc
          )
          echo "include=$MATRIX" >> $GITHUB_OUTPUT

  build_wheels:
    name: Build ${{ matrix.only }}
    needs: generate-wheels-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-wheels-matrix.outputs.include) }}
    runs-on: ${{ matrix.os }}
    
    env:
      CIBW_BUILD_VERBOSITY: 1
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y"
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install Rust
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.75.0
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        with:
          only: ${{ matrix.only }}

      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: bdist_files_${{ matrix.os }}_${{ strategy.job-index }}

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Rust
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.75.0
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run cargo check
        shell: bash
        run: |
          cargo --version

      - name: Build sdist (pep517)
        run: |
          python -m pip install build
          python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist_files
          path: dist/*.tar.gz


  assemble_wheels:
    name: Combine wheels
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: bdist_files_*
          merge-multiple: true
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: sdist_files
          path: dist

      - uses: actions/upload-artifact@v4
        with:
          path: ./dist/*
          name: collected_dist_files

  test_wheels:
    name: Test Wheels
    needs: [assemble_wheels]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-12, macos-latest]
        python-version: ["3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: collected_dist_files
          path: wheelhouse
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install guidance -f ./wheelhouse/
        name: Install guidance from wheels
      - run: pip install transformers torch
        name: Other installs
      - run: python -c "import guidance; lm = guidance.models.Transformers('gpt2'); lm += '1,2,3,4,5,' + guidance.gen('num', max_tokens=5, temperature=0); print(f'\n{str(lm)=}\n'); assert lm['num'].startswith('6')"
        name: Run smoke test

  publish_wheels:
    permissions:
      id-token: write
    name: Publish wheels on pypi
    needs: [test_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: collected_dist_files
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
